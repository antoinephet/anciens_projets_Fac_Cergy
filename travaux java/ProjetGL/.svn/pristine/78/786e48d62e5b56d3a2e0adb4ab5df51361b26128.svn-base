package chemin;


import java.io.Serializable;  

/** 
 * Représente un "noeud" du parcours de l'algotithme A*. Le noeud se caractèrise 
 * par : g , sa distance au noeud de départ h , sa distance au noeau d'arrivée f 
 * , la somme de g+h le noeud parent du noeud courant un index unique, par 
 * exemple la position sur une carte 
 
 */  
public class Node<T> implements Comparable<Node<T>>, Serializable {  
  
  
    private static final long serialVersionUID = 464891324986135L;  
  
    private final double g;  
    private final double f;  
    private final Node<T> parent;  
    private final T index;  
  
    /** 
     * Construit un nouveau noeud 
     *
     */  
    public Node(final Node<T> parent, final T index, final double g, final double f) {  
        this.parent = parent;  
        this.index = index;  
        this.g = g;  
        this.f = f;  
    }  
  
    /** 
     * Représente le cout réel entre ce noeud et le point de départ Le cout peut 
     * recouvrir la notion de distance, mais aussi de difficulté d'accès 
     */  
    public double getG() {  
        return g;  
    }  
 
    public double getF() {  
        return f;  
    }  
  
    
    public Node<T> getParent() {  
        return parent;  
    }  
  
    
    public T getIndex() {  
        return index;  
    }  
  
    /** 
     * La comparaison entre 2 noeuds doit se faire entre valeur de F 
     * 
     */  
    @Override  
    public int compareTo(final Node<T> node) {  
        if (node == this) {  
            return 0;  
        }  
        final int result = (int) (this.getF() - node.getF());  
        if (result == 0) {  
            return -1;  
        }  
        return result;  
    }  
  
    @SuppressWarnings("unchecked")  
    @Override  
    public boolean equals(final Object obj) {  
        if (!(obj instanceof Node<?>)) {  
            return false;  
        }  
        final Node<T> other = (Node<T>) obj;  
        if (other.getF() == getF() && other.getG() == getG() && (parent == null || parent.equals(other.getParent()))) {  
            return true;  
        }  
        return false;  
    }  
  
    @Override  
    public int hashCode() {  
        return (int) g + (int) f + ((parent != null) ? parent.hashCode() : 0);  
    }  
}  